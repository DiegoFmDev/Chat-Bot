from flask import Flask, request, render_template
from PyPDF2 import PdfReader
import google.generativeai as genai
import nltk
import re
import numpy as np
import networkx as nx 

genai.configure(api_key="AIzaSyASX8v2KKXP0OAAlHrYXHns0swN7Xvn_nQ")
question_answering_model = genai.GenerativeModel('gemini-pro')

app = Flask(__name__)

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        user_input = request.form['question']
        answer = ""

        if user_input.strip():  # Handle question answering
            chat = question_answering_model.start_chat(history=[])
            response = chat.send_message(user_input, stream=True)
            response.resolve()
            answer = response.parts[0].text

        elif 'pdf' in request.files and request.files['pdf'].filename != '':  # Handle PDF processing
            pdf_file = request.files['pdf']
            extracted_text = ''
            try:
                pdf_reader = PdfReader(pdf_file)
                for page in pdf_reader.pages:
                    extracted_text += page.extract_text()

                # Preprocess text (remove punctuation and special characters)
                extracted_text = re.sub(r'[^\w\s]', '', extracted_text)

                # Summarize the PDF
                answer = summarize_pdf(extracted_text)
                answer = f"**Resumen del PDF:** {answer}"

                # **Handle question answering if user input is present**
                # ... (Implement question answering using GenerativeAI or other methods)
                # **Improved summarization approach (consider these options):**
                # 1. Google GenerativeAI Summarization (if available)
                #    answer = summarize_pdf_using_generativeai(extracted_text)
                # 2. External Summarization API (e.g., Hugging Face Transformers)
                #    answer = summarize_pdf_using_external_api(extracted_text)
                # 3. TextRank-based summarization (using nltk)
                #    answer = summarize_pdf_using_textrank(extracted_text)  # Replace with your implementation

                if extracted_text.strip():
                    answer = summarize_pdf(extracted_text)  # Placeholder for your chosen summarization function
            except Exception as e:
                answer = f"Error procesando PDF: {str(e)}"

        else:
            answer = "Debes enviar al menos una pregunta o un PDF."

        return render_template('index.html', answer=answer)

    return render_template('index.html')

# **Define the chosen summarization function (replace with your implementation):**
def summarize_pdf(text):
    # Preprocess text (remove special characters, convert to lowercase, tokenize)
    processed_text = nltk.word_tokenize(nltk.clean_tokens(text.lower()))

    # Return the extracted text instead of generating the summary
    return processed_text
 
if __name__ == '__main__':
    app.run(debug=True)
